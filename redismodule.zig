comptime {
    const builtin = @import("builtin");
    if (builtin.os == builtin.Os.macosx) {
        @export("__mh_execute_header", _mh_execute_header, builtin.GlobalLinkage.Weak);
    }
}
var _mh_execute_header = extern struct {x: usize}{.x = 0};

pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __darwin_intptr_t = c_long;
pub const __darwin_natural_t = c_uint;
pub const __darwin_ct_rune_t = c_int;
pub const __mbstate_t = extern union {
    __mbstate8: [128]u8,
    _mbstateL: c_longlong,
};
pub const __darwin_mbstate_t = __mbstate_t;
pub const __darwin_ptrdiff_t = c_long;
pub const __darwin_size_t = c_ulong;
pub const struct___va_list_tag = extern struct {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: ?*c_void,
    reg_save_area: ?*c_void,
};
pub const __builtin_va_list = [1]struct___va_list_tag;
pub const __darwin_va_list = __builtin_va_list;
pub const __darwin_wchar_t = c_int;
pub const __darwin_rune_t = __darwin_wchar_t;
pub const __darwin_wint_t = c_int;
pub const __darwin_clock_t = c_ulong;
pub const __darwin_socklen_t = __uint32_t;
pub const __darwin_ssize_t = c_long;
pub const __darwin_time_t = c_long;
pub const u_int8_t = u8;
pub const u_int16_t = c_ushort;
pub const u_int32_t = c_uint;
pub const u_int64_t = c_ulonglong;
pub const register_t = i64;
pub const user_addr_t = u_int64_t;
pub const user_size_t = u_int64_t;
pub const user_ssize_t = i64;
pub const user_long_t = i64;
pub const user_ulong_t = u_int64_t;
pub const user_time_t = i64;
pub const user_off_t = i64;
pub const syscall_arg_t = u_int64_t;
pub const __darwin_blkcnt_t = __int64_t;
pub const __darwin_blksize_t = __int32_t;
pub const __darwin_dev_t = __int32_t;
pub const __darwin_fsblkcnt_t = c_uint;
pub const __darwin_fsfilcnt_t = c_uint;
pub const __darwin_gid_t = __uint32_t;
pub const __darwin_id_t = __uint32_t;
pub const __darwin_ino64_t = __uint64_t;
pub const __darwin_ino_t = __darwin_ino64_t;
pub const __darwin_mach_port_name_t = __darwin_natural_t;
pub const __darwin_mach_port_t = __darwin_mach_port_name_t;
pub const __darwin_mode_t = __uint16_t;
pub const __darwin_off_t = __int64_t;
pub const __darwin_pid_t = __int32_t;
pub const __darwin_sigset_t = __uint32_t;
pub const __darwin_suseconds_t = __int32_t;
pub const __darwin_uid_t = __uint32_t;
pub const __darwin_useconds_t = __uint32_t;
pub const __darwin_uuid_t = [16]u8;
pub const __darwin_uuid_string_t = [37]u8;
pub const struct___darwin_pthread_handler_rec = extern struct {
    __routine: extern fn(?*c_void) void,
    __arg: ?*c_void,
    __next: ?[*]struct___darwin_pthread_handler_rec,
};
pub const struct__opaque_pthread_attr_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_cond_t = extern struct {
    __sig: c_long,
    __opaque: [40]u8,
};
pub const struct__opaque_pthread_condattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_mutex_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_mutexattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_once_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_rwlock_t = extern struct {
    __sig: c_long,
    __opaque: [192]u8,
};
pub const struct__opaque_pthread_rwlockattr_t = extern struct {
    __sig: c_long,
    __opaque: [16]u8,
};
pub const struct__opaque_pthread_t = extern struct {
    __sig: c_long,
    __cleanup_stack: ?[*]struct___darwin_pthread_handler_rec,
    __opaque: [8176]u8,
};
pub const __darwin_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const __darwin_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const __darwin_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const __darwin_pthread_key_t = c_ulong;
pub const __darwin_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const __darwin_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const __darwin_pthread_once_t = struct__opaque_pthread_once_t;
pub const __darwin_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const __darwin_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const __darwin_pthread_t = ?[*]struct__opaque_pthread_t;
pub fn _OSSwapInt16(_data: __uint16_t) __uint16_t {
    return __uint16_t((c_int(_data) << @import("std").math.Log2Int(c_int)(8)) | (c_int(_data) >> @import("std").math.Log2Int(c_int)(8)));
}
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_quad_t = u_int64_t;
pub const quad_t = i64;
pub const qaddr_t = ?[*]quad_t;
pub const caddr_t = ?[*]u8;
pub const daddr_t = i32;
pub const dev_t = __darwin_dev_t;
pub const fixpt_t = u_int32_t;
pub const blkcnt_t = __darwin_blkcnt_t;
pub const blksize_t = __darwin_blksize_t;
pub const gid_t = __darwin_gid_t;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const ino_t = __darwin_ino_t;
pub const ino64_t = __darwin_ino64_t;
pub const key_t = __int32_t;
pub const mode_t = __darwin_mode_t;
pub const nlink_t = __uint16_t;
pub const id_t = __darwin_id_t;
pub const pid_t = __darwin_pid_t;
pub const off_t = __darwin_off_t;
pub const segsz_t = i32;
pub const swblk_t = i32;
pub const uid_t = __darwin_uid_t;
pub const clock_t = __darwin_clock_t;
pub const time_t = __darwin_time_t;
pub const useconds_t = __darwin_useconds_t;
pub const suseconds_t = __darwin_suseconds_t;
pub const rsize_t = __darwin_size_t;
pub const errno_t = c_int;
pub const struct_fd_set = extern struct {
    fds_bits: [32]__int32_t,
};
pub const fd_set = struct_fd_set;
pub fn __darwin_fd_isset(_n: c_int, _p: ?[*]const struct_fd_set) c_int {
    return _p.?.fds_bits[c_ulong(_n) / (@sizeOf(__int32_t) *% c_ulong(8))] & __int32_t(c_ulong(1) << @import("std").math.Log2Int(c_ulong)(c_ulong(_n) % (@sizeOf(__int32_t) *% c_ulong(8))));
}
pub const fd_mask = __int32_t;
pub const pthread_attr_t = __darwin_pthread_attr_t;
pub const pthread_cond_t = __darwin_pthread_cond_t;
pub const pthread_condattr_t = __darwin_pthread_condattr_t;
pub const pthread_mutex_t = __darwin_pthread_mutex_t;
pub const pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub const pthread_once_t = __darwin_pthread_once_t;
pub const pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub const pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub const pthread_t = __darwin_pthread_t;
pub const pthread_key_t = __darwin_pthread_key_t;
pub const fsblkcnt_t = __darwin_fsblkcnt_t;
pub const fsfilcnt_t = __darwin_fsfilcnt_t;
pub const int_least8_t = i8;
pub const int_least16_t = i16;
pub const int_least32_t = i32;
pub const int_least64_t = i64;
pub const uint_least8_t = u8;
pub const uint_least16_t = u16;
pub const uint_least32_t = u32;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const int_fast16_t = i16;
pub const int_fast32_t = i32;
pub const int_fast64_t = i64;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = u16;
pub const uint_fast32_t = u32;
pub const uint_fast64_t = u64;
pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub const RedisModuleTimerID = u64;
pub const mstime_t = c_longlong;
pub const struct_RedisModuleCtx = @OpaqueType();
pub const RedisModuleCtx = struct_RedisModuleCtx;
pub const struct_RedisModuleKey = @OpaqueType();
pub const RedisModuleKey = struct_RedisModuleKey;
pub const struct_RedisModuleString = @OpaqueType();
pub const RedisModuleString = struct_RedisModuleString;
pub const struct_RedisModuleCallReply = @OpaqueType();
pub const RedisModuleCallReply = struct_RedisModuleCallReply;
pub const struct_RedisModuleIO = @OpaqueType();
pub const RedisModuleIO = struct_RedisModuleIO;
pub const struct_RedisModuleType = @OpaqueType();
pub const RedisModuleType = struct_RedisModuleType;
pub const struct_RedisModuleDigest = @OpaqueType();
pub const RedisModuleDigest = struct_RedisModuleDigest;
pub const struct_RedisModuleBlockedClient = @OpaqueType();
pub const RedisModuleBlockedClient = struct_RedisModuleBlockedClient;
pub const struct_RedisModuleClusterInfo = @OpaqueType();
pub const RedisModuleClusterInfo = struct_RedisModuleClusterInfo;
pub const struct_RedisModuleDict = @OpaqueType();
pub const RedisModuleDict = struct_RedisModuleDict;
pub const struct_RedisModuleDictIter = @OpaqueType();
pub const RedisModuleDictIter = struct_RedisModuleDictIter;
pub const RedisModuleCmdFunc = extern fn(*RedisModuleCtx, [*](*RedisModuleString), c_int) c_int;
pub const RedisModuleDisconnectFunc = extern fn(*RedisModuleCtx, ?*RedisModuleBlockedClient) void;
pub const RedisModuleNotificationFunc = extern fn(*RedisModuleCtx, c_int, ?[*]const u8, *RedisModuleString) c_int;
pub const RedisModuleTypeLoadFunc = extern fn(?*RedisModuleIO, c_int) ?*c_void;
pub const RedisModuleTypeSaveFunc = extern fn(?*RedisModuleIO, ?*c_void) void;
pub const RedisModuleTypeRewriteFunc = extern fn(?*RedisModuleIO, *RedisModuleString, ?*c_void) void;
pub const RedisModuleTypeMemUsageFunc = extern fn(?*const c_void) usize;
pub const RedisModuleTypeDigestFunc = extern fn(?*RedisModuleDigest, ?*c_void) void;
pub const RedisModuleTypeFreeFunc = extern fn(?*c_void) void;
pub const RedisModuleClusterMessageReceiver = extern fn(*RedisModuleCtx, ?[*]const u8, u8, ?[*]const u8, u32) void;
pub const RedisModuleTimerProc = extern fn(*RedisModuleCtx, ?*c_void) void;
pub const struct_RedisModuleTypeMethods = extern struct {
    version: u64,
    rdb_load: RedisModuleTypeLoadFunc,
    rdb_save: RedisModuleTypeSaveFunc,
    aof_rewrite: RedisModuleTypeRewriteFunc,
    mem_usage: RedisModuleTypeMemUsageFunc,
    digest: RedisModuleTypeDigestFunc,
    free: RedisModuleTypeFreeFunc,
};
pub const RedisModuleTypeMethods = struct_RedisModuleTypeMethods;
pub var RedisModule_Alloc: extern fn(usize) ?*c_void = undefined;
pub var RedisModule_Realloc: extern fn(?*c_void, usize) ?*c_void = undefined;
pub var RedisModule_Free: extern fn(?*c_void) void = undefined;
pub var RedisModule_Calloc: extern fn(usize, usize) ?*c_void = undefined;
pub var RedisModule_Strdup: extern fn(?[*]const u8) ?[*]u8 = undefined;
pub var RedisModule_GetApi: extern fn(?[*]const u8, ?*c_void) c_int = undefined;
pub var RedisModule_CreateCommand: extern fn(*RedisModuleCtx, ?[*]const u8, RedisModuleCmdFunc, ?[*]const u8, c_int, c_int, c_int) c_int = undefined;
pub var RedisModule_SetModuleAttribs: extern fn(*RedisModuleCtx, ?[*]const u8, c_int, c_int) void = undefined;
pub var RedisModule_IsModuleNameBusy: extern fn(?[*]const u8) c_int = undefined;
pub var RedisModule_WrongArity: extern fn(*RedisModuleCtx) c_int = undefined;
pub var RedisModule_ReplyWithLongLong: extern fn(*RedisModuleCtx, c_longlong) c_int = undefined;
pub var RedisModule_GetSelectedDb: extern fn(*RedisModuleCtx) c_int = undefined;
pub var RedisModule_SelectDb: extern fn(*RedisModuleCtx, c_int) c_int = undefined;
pub var RedisModule_OpenKey: extern fn(*RedisModuleCtx, *RedisModuleString, c_int) ?*c_void = undefined;
pub var RedisModule_CloseKey: extern fn(*RedisModuleKey) void = undefined;
pub var RedisModule_KeyType: extern fn(*RedisModuleKey) c_int = undefined;
pub var RedisModule_ValueLength: extern fn(*RedisModuleKey) usize = undefined;
pub var RedisModule_ListPush: extern fn(*RedisModuleKey, c_int, *RedisModuleString) c_int = undefined;
pub var RedisModule_ListPop: extern fn(*RedisModuleKey, c_int) *RedisModuleString = undefined;
pub var RedisModule_Call: extern fn(*RedisModuleCtx, ?[*]const u8, ?[*]const u8) ?*RedisModuleCallReply = undefined;
pub var RedisModule_CallReplyProto: extern fn(?*RedisModuleCallReply, ?[*]usize) ?[*]const u8 = undefined;
pub var RedisModule_FreeCallReply: extern fn(?*RedisModuleCallReply) void = undefined;
pub var RedisModule_CallReplyType: extern fn(?*RedisModuleCallReply) c_int = undefined;
pub var RedisModule_CallReplyInteger: extern fn(?*RedisModuleCallReply) c_longlong = undefined;
pub var RedisModule_CallReplyLength: extern fn(?*RedisModuleCallReply) usize = undefined;
pub var RedisModule_CallReplyArrayElement: extern fn(?*RedisModuleCallReply, usize) ?*RedisModuleCallReply = undefined;
pub var RedisModule_CreateString: extern fn(*RedisModuleCtx, ?[*]const u8, usize) *RedisModuleString = undefined;
pub var RedisModule_CreateStringFromLongLong: extern fn(*RedisModuleCtx, c_longlong) *RedisModuleString = undefined;
pub var RedisModule_CreateStringFromString: extern fn(*RedisModuleCtx, ?*const RedisModuleString) *RedisModuleString = undefined;
pub var RedisModule_CreateStringPrintf: extern fn(*RedisModuleCtx, ?[*]const u8) *RedisModuleString = undefined;
pub var RedisModule_FreeString: extern fn(*RedisModuleCtx, *RedisModuleString) void = undefined;
pub var RedisModule_StringPtrLen: extern fn(?*const RedisModuleString, ?[*]usize) ?[*]const u8 = undefined;
pub var RedisModule_ReplyWithError: extern fn(*RedisModuleCtx, ?[*]const u8) c_int = undefined;
pub var RedisModule_ReplyWithSimpleString: extern fn(*RedisModuleCtx, ?[*]const u8) c_int = undefined;
pub var RedisModule_ReplyWithArray: extern fn(*RedisModuleCtx, c_long) c_int = undefined;
pub var RedisModule_ReplySetArrayLength: extern fn(*RedisModuleCtx, c_long) void = undefined;
pub var RedisModule_ReplyWithStringBuffer: extern fn(*RedisModuleCtx, ?[*]const u8, usize) c_int = undefined;
pub var RedisModule_ReplyWithString: extern fn(*RedisModuleCtx, *RedisModuleString) c_int = undefined;
pub var RedisModule_ReplyWithNull: extern fn(*RedisModuleCtx) c_int = undefined;
pub var RedisModule_ReplyWithDouble: extern fn(*RedisModuleCtx, f64) c_int = undefined;
pub var RedisModule_ReplyWithCallReply: extern fn(*RedisModuleCtx, ?*RedisModuleCallReply) c_int = undefined;
pub var RedisModule_StringToLongLong: extern fn(?*const RedisModuleString, ?[*]c_longlong) c_int = undefined;
pub var RedisModule_StringToDouble: extern fn(?*const RedisModuleString, ?[*]f64) c_int = undefined;
pub var RedisModule_AutoMemory: extern fn(*RedisModuleCtx) void = undefined;
pub var RedisModule_Replicate: extern fn(*RedisModuleCtx, ?[*]const u8, ?[*]const u8) c_int = undefined;
pub var RedisModule_ReplicateVerbatim: extern fn(*RedisModuleCtx) c_int = undefined;
pub var RedisModule_CallReplyStringPtr: extern fn(?*RedisModuleCallReply, ?[*]usize) ?[*]const u8 = undefined;
pub var RedisModule_CreateStringFromCallReply: extern fn(?*RedisModuleCallReply) *RedisModuleString = undefined;
pub var RedisModule_DeleteKey: extern fn(*RedisModuleKey) c_int = undefined;
pub var RedisModule_UnlinkKey: extern fn(*RedisModuleKey) c_int = undefined;
pub var RedisModule_StringSet: extern fn(*RedisModuleKey, *RedisModuleString) c_int = undefined;
pub var RedisModule_StringDMA: extern fn(*RedisModuleKey, ?[*]usize, c_int) ?[*]u8 = undefined;
pub var RedisModule_StringTruncate: extern fn(*RedisModuleKey, usize) c_int = undefined;
pub var RedisModule_GetExpire: extern fn(*RedisModuleKey) mstime_t = undefined;
pub var RedisModule_SetExpire: extern fn(*RedisModuleKey, mstime_t) c_int = undefined;
pub var RedisModule_ZsetAdd: extern fn(*RedisModuleKey, f64, *RedisModuleString, ?[*]c_int) c_int = undefined;
pub var RedisModule_ZsetIncrby: extern fn(*RedisModuleKey, f64, *RedisModuleString, ?[*]c_int, ?[*]f64) c_int = undefined;
pub var RedisModule_ZsetScore: extern fn(*RedisModuleKey, *RedisModuleString, ?[*]f64) c_int = undefined;
pub var RedisModule_ZsetRem: extern fn(*RedisModuleKey, *RedisModuleString, ?[*]c_int) c_int = undefined;
pub var RedisModule_ZsetRangeStop: extern fn(*RedisModuleKey) void = undefined;
pub var RedisModule_ZsetFirstInScoreRange: extern fn(*RedisModuleKey, f64, f64, c_int, c_int) c_int = undefined;
pub var RedisModule_ZsetLastInScoreRange: extern fn(*RedisModuleKey, f64, f64, c_int, c_int) c_int = undefined;
pub var RedisModule_ZsetFirstInLexRange: extern fn(*RedisModuleKey, *RedisModuleString, *RedisModuleString) c_int = undefined;
pub var RedisModule_ZsetLastInLexRange: extern fn(*RedisModuleKey, *RedisModuleString, *RedisModuleString) c_int = undefined;
pub var RedisModule_ZsetRangeCurrentElement: extern fn(*RedisModuleKey, ?[*]f64) *RedisModuleString = undefined;
pub var RedisModule_ZsetRangeNext: extern fn(*RedisModuleKey) c_int = undefined;
pub var RedisModule_ZsetRangePrev: extern fn(*RedisModuleKey) c_int = undefined;
pub var RedisModule_ZsetRangeEndReached: extern fn(*RedisModuleKey) c_int = undefined;
pub var RedisModule_HashSet: extern fn(*RedisModuleKey, c_int) c_int = undefined;
pub var RedisModule_HashGet: extern fn(*RedisModuleKey, c_int) c_int = undefined;
pub var RedisModule_IsKeysPositionRequest: extern fn(*RedisModuleCtx) c_int = undefined;
pub var RedisModule_KeyAtPos: extern fn(*RedisModuleCtx, c_int) void = undefined;
pub var RedisModule_GetClientId: extern fn(*RedisModuleCtx) c_ulonglong = undefined;
pub var RedisModule_GetContextFlags: extern fn(*RedisModuleCtx) c_int = undefined;
pub var RedisModule_PoolAlloc: extern fn(*RedisModuleCtx, usize) ?*c_void = undefined;
pub var RedisModule_CreateDataType: extern fn(*RedisModuleCtx, ?[*]const u8, c_int, ?[*]RedisModuleTypeMethods) ?*RedisModuleType = undefined;
pub var RedisModule_ModuleTypeSetValue: extern fn(*RedisModuleKey, ?*RedisModuleType, ?*c_void) c_int = undefined;
pub var RedisModule_ModuleTypeGetType: extern fn(*RedisModuleKey) ?*RedisModuleType = undefined;
pub var RedisModule_ModuleTypeGetValue: extern fn(*RedisModuleKey) ?*c_void = undefined;
pub var RedisModule_SaveUnsigned: extern fn(?*RedisModuleIO, u64) void = undefined;
pub var RedisModule_LoadUnsigned: extern fn(?*RedisModuleIO) u64 = undefined;
pub var RedisModule_SaveSigned: extern fn(?*RedisModuleIO, i64) void = undefined;
pub var RedisModule_LoadSigned: extern fn(?*RedisModuleIO) i64 = undefined;
pub var RedisModule_EmitAOF: extern fn(?*RedisModuleIO, ?[*]const u8, ?[*]const u8) void = undefined;
pub var RedisModule_SaveString: extern fn(?*RedisModuleIO, *RedisModuleString) void = undefined;
pub var RedisModule_SaveStringBuffer: extern fn(?*RedisModuleIO, ?[*]const u8, usize) void = undefined;
pub var RedisModule_LoadString: extern fn(?*RedisModuleIO) *RedisModuleString = undefined;
pub var RedisModule_LoadStringBuffer: extern fn(?*RedisModuleIO, ?[*]usize) ?[*]u8 = undefined;
pub var RedisModule_SaveDouble: extern fn(?*RedisModuleIO, f64) void = undefined;
pub var RedisModule_LoadDouble: extern fn(?*RedisModuleIO) f64 = undefined;
pub var RedisModule_SaveFloat: extern fn(?*RedisModuleIO, f32) void = undefined;
pub var RedisModule_LoadFloat: extern fn(?*RedisModuleIO) f32 = undefined;
pub var RedisModule_Log: extern fn(*RedisModuleCtx, ?[*]const u8, ?[*]const u8) void = undefined;
pub var RedisModule_LogIOError: extern fn(?*RedisModuleIO, ?[*]const u8, ?[*]const u8) void = undefined;
pub var RedisModule_StringAppendBuffer: extern fn(*RedisModuleCtx, *RedisModuleString, ?[*]const u8, usize) c_int = undefined;
pub var RedisModule_RetainString: extern fn(*RedisModuleCtx, *RedisModuleString) void = undefined;
pub var RedisModule_StringCompare: extern fn(*RedisModuleString, *RedisModuleString) c_int = undefined;
pub var RedisModule_GetContextFromIO: extern fn(?*RedisModuleIO) *RedisModuleCtx = undefined;
pub var RedisModule_Milliseconds: extern fn() c_longlong = undefined;
pub var RedisModule_DigestAddStringBuffer: extern fn(?*RedisModuleDigest, ?[*]u8, usize) void = undefined;
pub var RedisModule_DigestAddLongLong: extern fn(?*RedisModuleDigest, c_longlong) void = undefined;
pub var RedisModule_DigestEndSequence: extern fn(?*RedisModuleDigest) void = undefined;
pub var RedisModule_CreateDict: extern fn(*RedisModuleCtx) ?*RedisModuleDict = undefined;
pub var RedisModule_FreeDict: extern fn(*RedisModuleCtx, ?*RedisModuleDict) void = undefined;
pub var RedisModule_DictSize: extern fn(?*RedisModuleDict) u64 = undefined;
pub var RedisModule_DictSetC: extern fn(?*RedisModuleDict, ?*c_void, usize, ?*c_void) c_int = undefined;
pub var RedisModule_DictReplaceC: extern fn(?*RedisModuleDict, ?*c_void, usize, ?*c_void) c_int = undefined;
pub var RedisModule_DictSet: extern fn(?*RedisModuleDict, *RedisModuleString, ?*c_void) c_int = undefined;
pub var RedisModule_DictReplace: extern fn(?*RedisModuleDict, *RedisModuleString, ?*c_void) c_int = undefined;
pub var RedisModule_DictGetC: extern fn(?*RedisModuleDict, ?*c_void, usize, ?[*]c_int) ?*c_void = undefined;
pub var RedisModule_DictGet: extern fn(?*RedisModuleDict, *RedisModuleString, ?[*]c_int) ?*c_void = undefined;
pub var RedisModule_DictDelC: extern fn(?*RedisModuleDict, ?*c_void, usize, ?*c_void) c_int = undefined;
pub var RedisModule_DictDel: extern fn(?*RedisModuleDict, *RedisModuleString, ?*c_void) c_int = undefined;
pub var RedisModule_DictIteratorStartC: extern fn(?*RedisModuleDict, ?[*]const u8, ?*c_void, usize) ?*RedisModuleDictIter = undefined;
pub var RedisModule_DictIteratorStart: extern fn(?*RedisModuleDict, ?[*]const u8, *RedisModuleString) ?*RedisModuleDictIter = undefined;
pub var RedisModule_DictIteratorStop: extern fn(?*RedisModuleDictIter) void = undefined;
pub var RedisModule_DictIteratorReseekC: extern fn(?*RedisModuleDictIter, ?[*]const u8, ?*c_void, usize) c_int = undefined;
pub var RedisModule_DictIteratorReseek: extern fn(?*RedisModuleDictIter, ?[*]const u8, *RedisModuleString) c_int = undefined;
pub var RedisModule_DictNextC: extern fn(?*RedisModuleDictIter, ?[*]usize, ?[*](?*c_void)) ?*c_void = undefined;
pub var RedisModule_DictPrevC: extern fn(?*RedisModuleDictIter, ?[*]usize, ?[*](?*c_void)) ?*c_void = undefined;
pub var RedisModule_DictNext: extern fn(*RedisModuleCtx, ?*RedisModuleDictIter, ?[*](?*c_void)) *RedisModuleString = undefined;
pub var RedisModule_DictPrev: extern fn(*RedisModuleCtx, ?*RedisModuleDictIter, ?[*](?*c_void)) *RedisModuleString = undefined;
pub var RedisModule_DictCompareC: extern fn(?*RedisModuleDictIter, ?[*]const u8, ?*c_void, usize) c_int = undefined;
pub var RedisModule_DictCompare: extern fn(?*RedisModuleDictIter, ?[*]const u8, *RedisModuleString) c_int = undefined;
pub fn RedisModule_Init(ctx: *RedisModuleCtx, name: ?[*]const u8, ver: c_int, apiver: c_int) c_int {
    var getapifuncptr: ?*c_void = @ptrCast([*](?*c_void), @alignCast(8, ctx))[0];
    RedisModule_GetApi = @intToPtr(extern fn(?[*]const u8, ?*c_void) c_int, @ptrToInt(getapifuncptr));
    _ = RedisModule_GetApi(c"RedisModule_Alloc", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Alloc)));
    _ = RedisModule_GetApi(c"RedisModule_Calloc", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Calloc)));
    _ = RedisModule_GetApi(c"RedisModule_Free", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Free)));
    _ = RedisModule_GetApi(c"RedisModule_Realloc", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Realloc)));
    _ = RedisModule_GetApi(c"RedisModule_Strdup", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Strdup)));
    _ = RedisModule_GetApi(c"RedisModule_CreateCommand", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateCommand)));
    _ = RedisModule_GetApi(c"RedisModule_SetModuleAttribs", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SetModuleAttribs)));
    _ = RedisModule_GetApi(c"RedisModule_IsModuleNameBusy", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_IsModuleNameBusy)));
    _ = RedisModule_GetApi(c"RedisModule_WrongArity", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_WrongArity)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithLongLong", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithLongLong)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithError", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithError)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithSimpleString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithSimpleString)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithArray", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithArray)));
    _ = RedisModule_GetApi(c"RedisModule_ReplySetArrayLength", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplySetArrayLength)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithStringBuffer", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithStringBuffer)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithString)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithNull", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithNull)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithCallReply", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithCallReply)));
    _ = RedisModule_GetApi(c"RedisModule_ReplyWithDouble", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplyWithDouble)));
    _ = RedisModule_GetApi(c"RedisModule_ReplySetArrayLength", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplySetArrayLength)));
    _ = RedisModule_GetApi(c"RedisModule_GetSelectedDb", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_GetSelectedDb)));
    _ = RedisModule_GetApi(c"RedisModule_SelectDb", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SelectDb)));
    _ = RedisModule_GetApi(c"RedisModule_OpenKey", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_OpenKey)));
    _ = RedisModule_GetApi(c"RedisModule_CloseKey", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CloseKey)));
    _ = RedisModule_GetApi(c"RedisModule_KeyType", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_KeyType)));
    _ = RedisModule_GetApi(c"RedisModule_ValueLength", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ValueLength)));
    _ = RedisModule_GetApi(c"RedisModule_ListPush", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ListPush)));
    _ = RedisModule_GetApi(c"RedisModule_ListPop", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ListPop)));
    _ = RedisModule_GetApi(c"RedisModule_StringToLongLong", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringToLongLong)));
    _ = RedisModule_GetApi(c"RedisModule_StringToDouble", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringToDouble)));
    _ = RedisModule_GetApi(c"RedisModule_Call", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Call)));
    _ = RedisModule_GetApi(c"RedisModule_CallReplyProto", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CallReplyProto)));
    _ = RedisModule_GetApi(c"RedisModule_FreeCallReply", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_FreeCallReply)));
    _ = RedisModule_GetApi(c"RedisModule_CallReplyInteger", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CallReplyInteger)));
    _ = RedisModule_GetApi(c"RedisModule_CallReplyType", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CallReplyType)));
    _ = RedisModule_GetApi(c"RedisModule_CallReplyLength", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CallReplyLength)));
    _ = RedisModule_GetApi(c"RedisModule_CallReplyArrayElement", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CallReplyArrayElement)));
    _ = RedisModule_GetApi(c"RedisModule_CallReplyStringPtr", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CallReplyStringPtr)));
    _ = RedisModule_GetApi(c"RedisModule_CreateStringFromCallReply", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateStringFromCallReply)));
    _ = RedisModule_GetApi(c"RedisModule_CreateString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateString)));
    _ = RedisModule_GetApi(c"RedisModule_CreateStringFromLongLong", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateStringFromLongLong)));
    _ = RedisModule_GetApi(c"RedisModule_CreateStringFromString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateStringFromString)));
    _ = RedisModule_GetApi(c"RedisModule_CreateStringPrintf", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateStringPrintf)));
    _ = RedisModule_GetApi(c"RedisModule_FreeString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_FreeString)));
    _ = RedisModule_GetApi(c"RedisModule_StringPtrLen", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringPtrLen)));
    _ = RedisModule_GetApi(c"RedisModule_AutoMemory", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_AutoMemory)));
    _ = RedisModule_GetApi(c"RedisModule_Replicate", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Replicate)));
    _ = RedisModule_GetApi(c"RedisModule_ReplicateVerbatim", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ReplicateVerbatim)));
    _ = RedisModule_GetApi(c"RedisModule_DeleteKey", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DeleteKey)));
    _ = RedisModule_GetApi(c"RedisModule_UnlinkKey", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_UnlinkKey)));
    _ = RedisModule_GetApi(c"RedisModule_StringSet", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringSet)));
    _ = RedisModule_GetApi(c"RedisModule_StringDMA", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringDMA)));
    _ = RedisModule_GetApi(c"RedisModule_StringTruncate", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringTruncate)));
    _ = RedisModule_GetApi(c"RedisModule_GetExpire", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_GetExpire)));
    _ = RedisModule_GetApi(c"RedisModule_SetExpire", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SetExpire)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetAdd", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetAdd)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetIncrby", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetIncrby)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetScore", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetScore)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetRem", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetRem)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetRangeStop", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetRangeStop)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetFirstInScoreRange", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetFirstInScoreRange)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetLastInScoreRange", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetLastInScoreRange)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetFirstInLexRange", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetFirstInLexRange)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetLastInLexRange", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetLastInLexRange)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetRangeCurrentElement", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetRangeCurrentElement)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetRangeNext", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetRangeNext)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetRangePrev", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetRangePrev)));
    _ = RedisModule_GetApi(c"RedisModule_ZsetRangeEndReached", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ZsetRangeEndReached)));
    _ = RedisModule_GetApi(c"RedisModule_HashSet", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_HashSet)));
    _ = RedisModule_GetApi(c"RedisModule_HashGet", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_HashGet)));
    _ = RedisModule_GetApi(c"RedisModule_IsKeysPositionRequest", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_IsKeysPositionRequest)));
    _ = RedisModule_GetApi(c"RedisModule_KeyAtPos", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_KeyAtPos)));
    _ = RedisModule_GetApi(c"RedisModule_GetClientId", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_GetClientId)));
    _ = RedisModule_GetApi(c"RedisModule_GetContextFlags", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_GetContextFlags)));
    _ = RedisModule_GetApi(c"RedisModule_PoolAlloc", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_PoolAlloc)));
    _ = RedisModule_GetApi(c"RedisModule_CreateDataType", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateDataType)));
    _ = RedisModule_GetApi(c"RedisModule_ModuleTypeSetValue", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ModuleTypeSetValue)));
    _ = RedisModule_GetApi(c"RedisModule_ModuleTypeGetType", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ModuleTypeGetType)));
    _ = RedisModule_GetApi(c"RedisModule_ModuleTypeGetValue", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_ModuleTypeGetValue)));
    _ = RedisModule_GetApi(c"RedisModule_SaveUnsigned", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SaveUnsigned)));
    _ = RedisModule_GetApi(c"RedisModule_LoadUnsigned", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_LoadUnsigned)));
    _ = RedisModule_GetApi(c"RedisModule_SaveSigned", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SaveSigned)));
    _ = RedisModule_GetApi(c"RedisModule_LoadSigned", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_LoadSigned)));
    _ = RedisModule_GetApi(c"RedisModule_SaveString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SaveString)));
    _ = RedisModule_GetApi(c"RedisModule_SaveStringBuffer", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SaveStringBuffer)));
    _ = RedisModule_GetApi(c"RedisModule_LoadString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_LoadString)));
    _ = RedisModule_GetApi(c"RedisModule_LoadStringBuffer", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_LoadStringBuffer)));
    _ = RedisModule_GetApi(c"RedisModule_SaveDouble", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SaveDouble)));
    _ = RedisModule_GetApi(c"RedisModule_LoadDouble", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_LoadDouble)));
    _ = RedisModule_GetApi(c"RedisModule_SaveFloat", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_SaveFloat)));
    _ = RedisModule_GetApi(c"RedisModule_LoadFloat", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_LoadFloat)));
    _ = RedisModule_GetApi(c"RedisModule_EmitAOF", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_EmitAOF)));
    _ = RedisModule_GetApi(c"RedisModule_Log", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Log)));
    _ = RedisModule_GetApi(c"RedisModule_LogIOError", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_LogIOError)));
    _ = RedisModule_GetApi(c"RedisModule_StringAppendBuffer", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringAppendBuffer)));
    _ = RedisModule_GetApi(c"RedisModule_RetainString", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_RetainString)));
    _ = RedisModule_GetApi(c"RedisModule_StringCompare", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_StringCompare)));
    _ = RedisModule_GetApi(c"RedisModule_GetContextFromIO", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_GetContextFromIO)));
    _ = RedisModule_GetApi(c"RedisModule_Milliseconds", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_Milliseconds)));
    _ = RedisModule_GetApi(c"RedisModule_DigestAddStringBuffer", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DigestAddStringBuffer)));
    _ = RedisModule_GetApi(c"RedisModule_DigestAddLongLong", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DigestAddLongLong)));
    _ = RedisModule_GetApi(c"RedisModule_DigestEndSequence", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DigestEndSequence)));
    _ = RedisModule_GetApi(c"RedisModule_CreateDict", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_CreateDict)));
    _ = RedisModule_GetApi(c"RedisModule_FreeDict", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_FreeDict)));
    _ = RedisModule_GetApi(c"RedisModule_DictSize", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictSize)));
    _ = RedisModule_GetApi(c"RedisModule_DictSetC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictSetC)));
    _ = RedisModule_GetApi(c"RedisModule_DictReplaceC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictReplaceC)));
    _ = RedisModule_GetApi(c"RedisModule_DictSet", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictSet)));
    _ = RedisModule_GetApi(c"RedisModule_DictReplace", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictReplace)));
    _ = RedisModule_GetApi(c"RedisModule_DictGetC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictGetC)));
    _ = RedisModule_GetApi(c"RedisModule_DictGet", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictGet)));
    _ = RedisModule_GetApi(c"RedisModule_DictDelC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictDelC)));
    _ = RedisModule_GetApi(c"RedisModule_DictDel", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictDel)));
    _ = RedisModule_GetApi(c"RedisModule_DictIteratorStartC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictIteratorStartC)));
    _ = RedisModule_GetApi(c"RedisModule_DictIteratorStart", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictIteratorStart)));
    _ = RedisModule_GetApi(c"RedisModule_DictIteratorStop", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictIteratorStop)));
    _ = RedisModule_GetApi(c"RedisModule_DictIteratorReseekC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictIteratorReseekC)));
    _ = RedisModule_GetApi(c"RedisModule_DictIteratorReseek", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictIteratorReseek)));
    _ = RedisModule_GetApi(c"RedisModule_DictNextC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictNextC)));
    _ = RedisModule_GetApi(c"RedisModule_DictPrevC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictPrevC)));
    _ = RedisModule_GetApi(c"RedisModule_DictNext", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictNext)));
    _ = RedisModule_GetApi(c"RedisModule_DictPrev", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictPrev)));
    _ = RedisModule_GetApi(c"RedisModule_DictCompare", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictCompare)));
    _ = RedisModule_GetApi(c"RedisModule_DictCompareC", @ptrCast(?*c_void, @ptrCast(?[*](?*c_void), &RedisModule_DictCompareC)));
    if ((RedisModule_IsModuleNameBusy(name) != 0)) return 1;
    RedisModule_SetModuleAttribs(ctx, name, ver, apiver);
    return 0;
}
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __FLT16_MAX_EXP__ = 15;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const __SIZEOF_FLOAT__ = 4;
pub const __INT64_FMTd__ = c"lld";
pub const __STDC_VERSION__ = c_long(201112);
pub const INT_FAST64_MAX = INT64_MAX;
pub const __INT_LEAST32_FMTi__ = c"i";
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_2 = x;
pub const __INT_LEAST8_FMTi__ = c"hhi";
pub const __LDBL_EPSILON__ = 0.000000;
pub const __INT_LEAST32_FMTd__ = c"d";
pub const __STDC_UTF_32__ = 1;
pub const REDISMODULE_KEYTYPE_STRING = 1;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const INT_FAST64_MIN = INT64_MIN;
pub const __UINT_FAST64_FMTX__ = c"lX";
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_1 = x;
pub const __clang_version__ = c"7.0.0 (tags/RELEASE_700/final)";
pub const __UINT_LEAST8_FMTo__ = c"hho";
pub const __SIZEOF_DOUBLE__ = 8;
pub const REDISMODULE_POSTPONED_ARRAY_LEN = -1;
pub const __INTMAX_FMTd__ = c"ld";
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __DARWIN_SUF_EXTSN = c"$DARWIN_EXTSN";
pub const LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __INT_LEAST16_FMTi__ = c"hi";
pub const REDISMODULE_KEYTYPE_EMPTY = 0;
pub const UINTMAX_MAX = UINT64_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0 = x;
pub const WINT_MIN = INT32_MIN;
pub const __MMX__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const BYTE_ORDER = __DARWIN_BYTE_ORDER;
pub const NBBY = __DARWIN_NBBY;
pub const INTPTR_MAX = c_long(9223372036854775807);
pub const __SIZE_FMTX__ = c"lX";
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_3 = x;
pub const INTMAX_MIN = INT64_MIN;
pub const __DARWIN_SUF_1050 = c"$1050";
pub const REDISMODULE_TYPE_METHOD_VERSION = 1;
pub const __WCHAR_WIDTH__ = 32;
pub const __PTRDIFF_FMTd__ = c"ld";
pub const __DBL_MIN_EXP__ = -1021;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __SSE_MATH__ = 1;
pub const INT64_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-INT64_MAX, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-INT64_MAX, -1) else (-INT64_MAX)(-1);
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_1 = x;
pub const __UINT_FAST8_FMTo__ = c"hho";
pub const __UINT_LEAST64_MAX__ = c_ulong(18446744073709551615);
pub const REDISMODULE_HASH_NONE = 0;
pub const __UINT_LEAST64_FMTx__ = c"lx";
pub const __INT8_MAX__ = 127;
pub const __DBL_HAS_DENORM__ = 1;
pub const __signed = signed;
pub const __FLT16_HAS_QUIET_NAN__ = 1;
pub const __ATOMIC_RELAXED = 0;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __SIZEOF_SHORT__ = 2;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT16_FMTX__ = c"hX";
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __SSSE3__ = 1;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_0 = x;
pub const PTRDIFF_MAX = INT64_MAX;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2 = x;
pub const __WINT_MAX__ = 2147483647;
pub const __LDBL_MAX_EXP__ = 16384;
pub const __NO_MATH_INLINES = 1;
pub const __WCHAR_TYPE__ = int;
pub const __LONG_MAX__ = c_long(9223372036854775807);
pub const __STDC_HOSTED__ = 1;
pub const __PTHREAD_RWLOCKATTR_SIZE__ = 16;
pub const __pic__ = 2;
pub const __INT_FAST16_FMTi__ = c"hi";
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INT_LEAST32_TYPE__ = int;
pub const __SCHAR_MAX__ = 127;
pub const __LDBL_DENORM_MIN__ = 0.000000;
pub const REDISMODULE_APIVER_1 = 1;
pub const __FLT16_MIN_EXP__ = -14;
pub const __INT64_C_SUFFIX__ = LL;
pub const USER_ADDR_NULL = if (@typeId(@typeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(user_addr_t, 0) else if (@typeId(@typeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(user_addr_t, 0) else user_addr_t(0);
pub const REDISMODULE_KEYTYPE_HASH = 3;
pub const __LDBL_MANT_DIG__ = 64;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const INT16_MIN = -32768;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __UINT64_FMTX__ = c"llX";
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_1 = x;
pub const __UINT64_MAX__ = c_ulonglong(18446744073709551615);
pub const __DBL_MANT_DIG__ = 53;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __DBL_DIG__ = 15;
pub const _QUAD_LOWWORD = 0;
pub const __ATOMIC_ACQUIRE = 2;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __FLT16_HAS_DENORM__ = 1;
pub const __UINT_FAST16_FMTu__ = c"hu";
pub const __INTPTR_FMTi__ = c"li";
pub const __UINT_FAST8_FMTX__ = c"hhX";
pub const __LITTLE_ENDIAN__ = 1;
pub const __SSE__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __PTHREAD_ONCE_SIZE__ = 8;
pub const __DARWIN_PDP_ENDIAN = 3412;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __const = @"const";
pub const __UINT_LEAST16_FMTo__ = c"ho";
pub const __UINT8_FMTo__ = c"hho";
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const __UINT_LEAST16_FMTx__ = c"hx";
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __UINT_FAST16_FMTX__ = c"hX";
pub const __VERSION__ = c"4.2.1 Compatible Clang 7.0.0 (tags/RELEASE_700/final)";
pub const __UINT_FAST32_FMTx__ = c"x";
pub const __UINTPTR_MAX__ = c_ulong(18446744073709551615);
pub const __UINT_FAST8_FMTu__ = c"hhu";
pub const UINT16_MAX = 65535;
pub const __UINT_LEAST8_FMTu__ = c"hhu";
pub const __UINT_LEAST64_FMTo__ = c"lo";
pub const __UINT_LEAST8_MAX__ = 255;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_1 = x;
pub const UINT8_MAX = 255;
pub const __PTHREAD_MUTEXATTR_SIZE__ = 8;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __DARWIN_NO_LONG_LONG = 0;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0 = x;
pub const __FBSDID = s;
pub const __PTHREAD_MUTEX_SIZE__ = 56;
pub const __LDBL_MAX__ = inf;
pub const __UINT16_MAX__ = 65535;
pub const _LP64 = 1;
pub const FD_SETSIZE = __DARWIN_FD_SETSIZE;
pub const __x86_64 = 1;
pub const __SIZEOF_WINT_T__ = 4;
pub const __UINTMAX_FMTo__ = c"lo";
pub const __FLT_DIG__ = 6;
pub const __UINT_LEAST8_FMTX__ = c"hhX";
pub const __INT16_MAX__ = 32767;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __UINTPTR_FMTX__ = c"lX";
pub const __UINT_LEAST16_FMTu__ = c"hu";
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const __WINT_WIDTH__ = 32;
pub const REDISMODULE_REPLY_ERROR = 1;
pub const __SHRT_MAX__ = 32767;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __POINTER_WIDTH__ = 64;
pub const PTRDIFF_MIN = INT64_MIN;
pub const __PTRDIFF_MAX__ = c_long(9223372036854775807);
pub const __INT32_FMTd__ = c"d";
pub const __FLT16_DIG__ = 3;
pub const __DBL_MIN__ = 0.000000;
pub const __SIZEOF_LONG__ = 8;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_1 = x;
pub const __INTPTR_WIDTH__ = 64;
pub const __FLT16_MAX_10_EXP__ = 4;
pub const __INT_FAST32_TYPE__ = int;
pub const __PTHREAD_SIZE__ = 8176;
pub const __NO_INLINE__ = 1;
pub const __UINT_FAST32_FMTX__ = c"X";
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_2 = x;
pub const __PTHREAD_ATTR_SIZE__ = 56;
pub const __header_inline = @"inline";
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0 = x;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const REDISMODULE_KEYTYPE_LIST = 2;
pub const __UINTMAX_FMTu__ = c"lu";
pub const __DARWIN_LITTLE_ENDIAN = 1234;
pub const INT_FAST8_MAX = INT8_MAX;
pub const __tune_core2__ = 1;
pub const __FLT_RADIX__ = 2;
pub const __FLT16_HAS_INFINITY__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const INT_FAST8_MIN = INT8_MIN;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_4 = x;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_0 = x;
pub const REDISMODULE_LIST_HEAD = 0;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __INT_FAST8_FMTd__ = c"hhd";
pub const __FLT16_DECIMAL_DIG__ = 5;
pub const __INT32_TYPE__ = int;
pub const __restrict = restrict;
pub const __UINTMAX_WIDTH__ = 64;
pub const __FLT_MIN__ = 0.000000;
pub const __INT64_FMTi__ = c"lli";
pub const __UINT_FAST64_FMTu__ = c"lu";
pub const __INT8_FMTd__ = c"hhd";
pub const __swift_unavailable = _msg;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const __INT_FAST16_TYPE__ = short;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_3 = x;
pub const INT64_MAX = c_longlong(9223372036854775807);
pub const __FLT_MAX_EXP__ = 128;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __LDBL_MIN__ = 0.000000;
pub const __INT_FAST64_FMTi__ = c"li";
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_0 = x;
pub const __INT_LEAST8_FMTd__ = c"hhd";
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __UINT_LEAST32_FMTX__ = c"X";
pub const __PIC__ = 2;
pub const __UINTMAX_MAX__ = c_ulong(18446744073709551615);
pub const __UINT_FAST16_FMTo__ = c"ho";
pub const REDISMODULE_KEYTYPE_SET = 4;
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const REDISMODULE_REPLY_STRING = 0;
pub const __UINT_LEAST64_FMTX__ = c"lX";
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1 = x;
pub const __clang_minor__ = 0;
pub const __DARWIN_FD_SETSIZE = 1024;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const __APPLE_CC__ = 6000;
pub const REDISMODULE_LIST_TAIL = 1;
pub const INTMAX_MAX = INT64_MAX;
pub const REDISMODULE_REPLY_NULL = 4;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_0 = x;
pub const __PTHREAD_CONDATTR_SIZE__ = 8;
pub const __BLOCKS__ = 1;
pub const __UINT_FAST64_FMTo__ = c"lo";
pub const __SIZE_FMTx__ = c"lx";
pub const INT_FAST16_MIN = INT16_MIN;
pub const __DBL_MAX__ = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878;
pub const __DBL_EPSILON__ = 0.000000;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_3 = x;
pub const __UINT64_FMTx__ = c"llx";
pub const INT_FAST32_MIN = INT32_MIN;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2 = x;
pub const INT32_MAX = 2147483647;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_0 = x;
pub const __CHAR_BIT__ = 8;
pub const __INT16_FMTi__ = c"hi";
pub const _DEBUG = 1;
pub const __GNUC_MINOR__ = 2;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const INT32_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-INT32_MAX, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-INT32_MAX, -1) else (-INT32_MAX)(-1);
pub const __UINT_FAST32_MAX__ = c_uint(4294967295);
pub const __UINT8_FMTX__ = c"hhX";
pub const NFDBITS = __DARWIN_NFDBITS;
pub const __FLT_EPSILON__ = 0.000000;
pub const INT_FAST32_MAX = INT32_MAX;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const __UINTPTR_WIDTH__ = 64;
pub const __llvm__ = 1;
pub const __UINT_FAST64_MAX__ = c_ulong(18446744073709551615);
pub const __INT_FAST32_FMTi__ = c"i";
pub const INT16_MAX = 32767;
pub const __FLT_HAS_INFINITY__ = 1;
pub const __UINT8_FMTx__ = c"hhx";
pub const __INTMAX_C_SUFFIX__ = L;
pub const __STDC_WANT_LIB_EXT1__ = 1;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __null_unspecified = _Null_unspecified;
pub const __INT16_FMTd__ = c"hd";
pub const REDISMODULE_CLUSTER_FLAG_NONE = 0;
pub const __UINT32_FMTX__ = c"X";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const __UINT32_C_SUFFIX__ = U;
pub const __INT32_MAX__ = 2147483647;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __INTMAX_WIDTH__ = 64;
pub const __DARWIN_NON_CANCELABLE = 0;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __DARWIN_NBBY = 8;
pub const __SIZE_FMTo__ = c"lo";
pub const REDISMODULE_REPLY_INTEGER = 2;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __APPLE__ = 1;
pub const __INT_FAST8_FMTi__ = c"hhi";
pub const __UINT_LEAST32_FMTo__ = c"o";
pub const __STDC_UTF_16__ = 1;
pub const __UINT_LEAST32_MAX__ = c_uint(4294967295);
pub const __ATOMIC_RELEASE = 3;
pub const __USER_LABEL_PREFIX__ = _;
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __UINT_FAST16_FMTx__ = c"hx";
pub const __FLT_MIN_EXP__ = -125;
pub const REDISMODULE_KEYTYPE_ZSET = 5;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __UINT_LEAST64_FMTu__ = c"lu";
pub const __DARWIN_UNIX03 = 1;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __INT_FAST64_FMTd__ = c"ld";
pub const INT_LEAST8_MIN = INT8_MIN;
pub const __STDC_NO_THREADS__ = 1;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GXX_ABI_VERSION = 1002;
pub const __INT16_TYPE__ = short;
pub const __core2__ = 1;
pub const __SSE2_MATH__ = 1;
pub const INTPTR_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-INTPTR_MAX, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-INTPTR_MAX, -1) else (-INTPTR_MAX)(-1);
pub const __FLT_MANT_DIG__ = 24;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const REDISMODULE_REPLY_ARRAY = 3;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const REDISMODULE_NO_EXPIRE = -1;
pub const __UINT_FAST64_FMTx__ = c"lx";
pub const __STDC__ = 1;
pub const __INT_FAST8_MAX__ = 127;
pub const __INTPTR_FMTd__ = c"ld";
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __SIZE_WIDTH__ = 64;
pub const __UINT_LEAST8_FMTx__ = c"hhx";
pub const __INT_LEAST64_FMTi__ = c"li";
pub const __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;
pub const __INT_FAST16_MAX__ = 32767;
pub const REDISMODULE_NODE_ID_LEN = 40;
pub const __INTPTR_MAX__ = c_long(9223372036854775807);
pub const __WINT_TYPE__ = int;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __UINT64_FMTu__ = c"llu";
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __SSE2__ = 1;
pub const __DARWIN_NULL = if (@typeId(@typeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast([*]void, 0) else if (@typeId(@typeOf(0)) == @import("builtin").TypeId.Int) @intToPtr([*]void, 0) else ([*]void)(0);
pub const REDISMODULE_ERRORMSG_WRONGTYPE = c"WRONGTYPE Operation against a key holding the wrong kind of value";
pub const __SSP__ = 1;
pub const __INT_MAX__ = 2147483647;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_0 = x;
pub const __INTMAX_FMTi__ = c"li";
pub const __DBL_DENORM_MIN__ = 0.000000;
pub const __clang_major__ = 7;
pub const __FLT16_MANT_DIG__ = 11;
pub const __GNUC__ = 4;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1 = x;
pub const __UINT32_MAX__ = c_uint(4294967295);
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_2 = x;
pub const UINTPTR_MAX = c_ulong(18446744073709551615);
pub const __nullable = _Nullable;
pub const __FLT_DENORM_MIN__ = 0.000000;
pub const __DBL_MAX_EXP__ = 1024;
pub const __INT8_FMTi__ = c"hhi";
pub const __DYNAMIC__ = 1;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const __DARWIN_64_BIT_INO_T = 1;
pub const __LDBL_HAS_DENORM__ = 1;
pub const __FLT16_MIN_10_EXP__ = -13;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;
pub const __UINT_FAST8_MAX__ = 255;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __UINT8_FMTu__ = c"hhu";
pub const WINT_MAX = INT32_MAX;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_0 = x;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const __INT_FAST64_MAX__ = c_long(9223372036854775807);
pub const __SSE3__ = 1;
pub const __UINT16_FMTu__ = c"hu";
pub const __ATOMIC_SEQ_CST = 5;
pub const __SIZE_FMTu__ = c"lu";
pub const REDISMODULE_OK = 0;
pub const __UINT_FAST32_FMTu__ = c"u";
pub const __LDBL_MIN_EXP__ = -16381;
pub const SIZE_MAX = UINTPTR_MAX;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_1 = x;
pub const __DARWIN_C_FULL = c_long(900000);
pub const __clang_patchlevel__ = 0;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __MACH__ = 1;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __FXSR__ = 1;
pub const __UINT8_MAX__ = 255;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __UINT32_FMTx__ = c"x";
pub const __UINT16_FMTo__ = c"ho";
pub const __DARWIN_C_LEVEL = __DARWIN_C_FULL;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const __UINT32_FMTu__ = c"u";
pub const __SIZEOF_POINTER__ = 8;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_1 = x;
pub const __SIZE_MAX__ = c_ulong(18446744073709551615);
pub const __INT_FAST16_FMTd__ = c"hd";
pub const _QUAD_HIGHWORD = 1;
pub const __UINT_LEAST32_FMTu__ = c"u";
pub const REDISMODULE_REPLY_UNKNOWN = -1;
pub const __FLT_MAX__ = 340282346999999984391321947108527833088.000000;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_0 = x;
pub const __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_1 = x;
pub const __ATOMIC_CONSUME = 1;
pub const UINT32_MAX = c_uint(4294967295);
pub const __x86_64__ = 1;
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __UINTMAX_FMTx__ = c"lx";
pub const __UINT64_C_SUFFIX__ = ULL;
pub const __FLT_MIN_10_EXP__ = -37;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __UINT32_FMTo__ = c"o";
pub const __UINTPTR_FMTo__ = c"lo";
pub const __INT_LEAST16_FMTd__ = c"hd";
pub const __UINTPTR_FMTx__ = c"lx";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __INT_LEAST64_FMTd__ = c"ld";
pub const UINT64_MAX = c_ulonglong(18446744073709551615);
pub const __nonnull = _Nonnull;
pub const __DARWIN_VERS_1050 = 1;
pub const __INT_LEAST16_TYPE__ = short;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2 = x;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __INT_LEAST8_MAX__ = 127;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_1 = x;
pub const __DARWIN_BIG_ENDIAN = 4321;
pub const __SIZEOF_INT__ = 4;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const INT8_MIN = -128;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_2 = x;
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const __PTHREAD_RWLOCK_SIZE__ = 192;
pub const __PTHREAD_COND_SIZE__ = 40;
pub const __amd64 = 1;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3 = x;
pub const INT8_MAX = 127;
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const REDISMODULE_ERR = 1;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __SIZEOF_INT128__ = 16;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_4 = x;
pub const __UINT_FAST8_FMTx__ = c"hhx";
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = 101400;
pub const __UINT16_FMTx__ = c"hx";
pub const __DARWIN_ONLY_VERS_1050 = 0;
pub const __UINTPTR_FMTu__ = c"lu";
pub const __UINT_LEAST16_FMTX__ = c"hX";
pub const WCHAR_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-WCHAR_MAX, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-WCHAR_MAX, -1) else (-WCHAR_MAX)(-1);
pub const __amd64__ = 1;
pub const __UINT_FAST32_FMTo__ = c"o";
pub const __clang__ = 1;
pub const __LP64__ = 1;
pub const INT_FAST16_MAX = INT16_MAX;
pub const __PTRDIFF_FMTi__ = c"li";
pub const OBJC_NEW_PROPERTIES = 1;
pub const __SSE4_1__ = 1;
pub const __volatile = @"volatile";
pub const __LDBL_DIG__ = 18;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __core2 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE = 1;
pub const __UINT64_FMTo__ = c"llo";
pub const __INT_FAST32_FMTd__ = c"d";
pub const BIG_ENDIAN = __DARWIN_BIG_ENDIAN;
pub const __ATOMIC_ACQ_REL = 4;
pub const PDP_ENDIAN = __DARWIN_PDP_ENDIAN;
pub const __LONG_LONG_MAX__ = c_longlong(9223372036854775807);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_3 = x;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1 = x;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE = 1;
pub const __INTMAX_MAX__ = c_long(9223372036854775807);
pub const __UINT_LEAST32_FMTx__ = c"x";
pub const __WORDSIZE = 64;
pub const __WCHAR_MAX__ = 2147483647;
pub const __INT64_MAX__ = c_longlong(9223372036854775807);
pub const __DARWIN_SUF_64_BIT_INO_T = c"$INODE64";
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __INT_LEAST64_MAX__ = c_long(9223372036854775807);
pub const __UINTMAX_FMTX__ = c"lX";
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __FLT_HAS_DENORM__ = 1;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __INT32_FMTi__ = c"i";
pub const __DBL_HAS_INFINITY__ = 1;
pub const __FINITE_MATH_ONLY__ = 0;
pub const REDISMODULE_KEYTYPE_MODULE = 6;
pub const __va_list_tag = struct___va_list_tag;
pub const __darwin_pthread_handler_rec = struct___darwin_pthread_handler_rec;
pub const _opaque_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const _opaque_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const _opaque_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const _opaque_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const _opaque_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const _opaque_pthread_once_t = struct__opaque_pthread_once_t;
pub const _opaque_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const _opaque_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const _opaque_pthread_t = struct__opaque_pthread_t;
